package com.spring.project.Controllers;

import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.spring.project.Model.Article;
import com.spring.project.Model.LikedDisliked;
import com.spring.project.Model.createArticleCommand;
import com.spring.project.Repository.ArticleRepository;
import com.spring.project.Repository.LikedDislikedRepository;
import com.spring.project.Repository.UserRepository;


@Controller // This means that this class is a Controller
@RequestMapping(path="/article") // This means URL's start with /demo (after Application path)
public class ArticleController<U> {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private ArticleRepository articleRepository;
  @Autowired
  private UserRepository userRepository;
  @Autowired
  private LikedDislikedRepository likedDislikedRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewArticle (@RequestBody createArticleCommand arg) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Article n = new Article();
    n.setAuthor(userRepository.findById(arg.getAuthor()).get());
    n.setContent(arg.getContent());
    n.setPublishDate(new Date());
    articleRepository.save(n);
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Article> getAllArticles() {
    // This returns a JSON or XML with the users
    return articleRepository.findAll();
  }

  @PutMapping(path="modify/{id}")
  public @ResponseBody Object modifyArticle(@PathVariable int id, @RequestBody createArticleCommand arg) {
    Optional<Article> n = articleRepository.findById(id);
    if(n.isPresent()){
      return articleRepository.findById(id).map(article -> {
        article.setContent(arg.getContent());
        return articleRepository.save(article);
        });
      }
    return "Probl√®me avec la requete";
  }

  @DeleteMapping(path="delete/{id}")
  public @ResponseBody String deleteArticle(@PathVariable int id){
    Iterable<LikedDisliked> a = articleRepository.findLove(id);
      for(LikedDisliked v : a){
        likedDislikedRepository.deleteById(v.getId());
      }
      articleRepository.deleteById(id);
      return "delete successfully";
    }
}
